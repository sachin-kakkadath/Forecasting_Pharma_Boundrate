# -*- coding: utf-8 -*-
"""Forecasting Pharma Bounce Rate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BQBf_sG_GHCkZCpu_RrG4mIRIjmvdRQR
"""

import pandas as pd
import numpy as np
import seaborn as sns
import dtale
import statsmodels.graphics.tsaplots as tsa_plots
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt
from matplotlib import pyplot
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.holtwinters import SimpleExpSmoothing # SES
from statsmodels.tsa.holtwinters import Holt # Holts Exponential Smoothing
from statsmodels.tsa.holtwinters import ExponentialSmoothing # Holt Winter's Exponential Smoothing

import scipy.stats as stats
import pylab

from numpy import isnan
from sklearn.impute import KNNImputer

pip install dtale

import warnings
warnings.filterwarnings('ignore')
warnings.simplefilter('ignore')

###Load Data###

from google.colab import files
uploaded = files.upload()

import io
data = pd.read_csv(io.BytesIO(uploaded['Pharma_Bounce_Rate.csv']))
# Dataset is now stored in a Pandas Dataframe

data.info()

data.describe().round(2)

"""##**Check for duplicates**"""

duplicate = data.duplicated()
duplicate

data.isnull().sum()

"""##**Checking for missing values**"""

data.isna().sum()

data.dropna(inplace=True)

data.isna().sum()

"""##**Converting the datatype of Date column from Object to Datetime format**"""

data['Dateofbill'] = pd.to_datetime(data['Dateofbill'])

#Sorting the date column
data = data.sort_values(by='Dateofbill')
data.head()

#autoeda
d = dtale.show(data)
d

# dropping Typeofsales and Patient_ID, since it is not required
data = data.drop(["Typeofsales", "Patient_ID"], axis =1)

data['DrugName'].value_counts().head(10).plot(kind = 'bar')
data = data[["Dateofbill","Quantity", "DrugName"]]
data = data.set_index('Dateofbill')
data.index = pd.to_datetime(data.index)
grouped_data = data.groupby('DrugName')

data

# Forecasting For Top 5 drugs

A = grouped_data.get_group('SODIUM CHLORIDE IVF 100ML')
A1 = grouped_data.get_group('SODIUM CHLORIDE 0.9%')
A2 = grouped_data.get_group('WATER FOR INJECTION 10ML SOLUTION')
A3 = grouped_data.get_group('LIGNOCAINE HYDROCHLORIDE 2% INJ')
A4 = grouped_data.get_group('N-ACETYLCYSTEINE 1000MG/5ML INJ')

A = A[["Quantity"]]
A.rename(columns = {"Quantity" : "SODIUM CHLORIDE IVF 100ML"}, inplace=True)
A = A.resample('M').sum()
A.plot()

A1 = A1[["Quantity"]]
A1.rename(columns = {"Quantity" : "SEVOFLURANE 99.97%"}, inplace=True)
A1 = A1.resample('M').sum()
A1.plot()

A2 = A2[["Quantity"]]
A2.rename(columns = {"Quantity" : "SODIUM CHLORIDE 0.9%"}, inplace=True)
A2 = A2.resample('M').sum()
A2.plot()

A3 = A3[["Quantity"]]
A3.rename(columns = {"Quantity" : "ONDANSETRON 2MG/ML"}, inplace=True)
A3 = A3.resample('M').sum()
A3.plot()

A4 = A4[["Quantity"]]
A4.rename(columns = {"Quantity" : "MULTIPLE ELECTROLYTES 500ML IVF"}, inplace=True)
A4 = A4.resample('M').sum()
A4.plot()

from statsmodels.tsa.stattools import adfuller

def adf_test(series):
    result=adfuller(series)
    print('ADF Statistics: {}'.format(result[0]))
    print('p- value: {}'.format(result[1]))
    if result[1] <= 0.05:
        print("Strong evidence against the null hypothesis, reject the null hypothesis. Data has no unit root and is stationary")
    else:
        print("Weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")

adf_test(A)
adf_test(A1)

def decompose(df):
    """
    A function that returns the trend, seasonality and residual captured by applying both multiplicative and
    additive model.
    df -> DataFrame
    column_name -> column_name for which trend, seasonality is to be captured
    """
    # result_mul = seasonal_decompose(df, model='multiplicative', extrapolate_trend = 'freq',  period=1)
    result_add = seasonal_decompose(df, model = 'additive', extrapolate_trend='freq',  period=1)

    plt.rcParams.update({'figure.figsize': (20, 10)})
    # result_mul.plot().suptitle('Multiplicative Decompose', fontsize=30)
    result_add.plot().suptitle('Additive Decompose', fontsize=30)
    plt.show()

    return  result_add

decompose(A)
decompose(A1)

from statsmodels.graphics.tsaplots import plot_acf,plot_pacf

# ACF plots
plot_acf(A)  # 1
plot_acf(A1) # 4

# pcf plots
plot_pacf(A , lags = 3)  # 1
plot_pacf(A1 , lags = 4) # 1

# Creating a function to calculate the MAPE value for test data
def MAPE(pred, org):
    temp = np.abs((pred-org)/org)*100
    return np.mean(temp)

# Auto Arima
from pmdarima import auto_arima
# Ignore harmless warnings
import warnings
warnings.filterwarnings("ignore")

pip install pmdarima

Am = auto_arima(A, suppress_warnings=True)
Am.summary()

Am1 = auto_arima(A1, suppress_warnings=True)
Am1.summary()

################
# SODIUM CHLORIDE IVF 100ML
Drug1=ARIMA(A,order=(1, 1, 12))
Drug1=Drug1.fit()
Drug1.summary()

pred=Drug1.predict(start=1,end=8, typ='levels').rename('ARIMA predictions')
pred.plot()

from sklearn.metrics import mean_absolute_percentage_error
mean_absolute_percentage_error(A['SODIUM CHLORIDE IVF 100ML'], pred)

predf=Drug1.predict(start=12,end=24,typ='levels').rename('ARIMA predictions')
predf
Drug1.save('drug_1.pkl')

# SEVOFLURANE 99.97% #
Drug2 = ARIMA(A1,order=(4, 1, 12))
Drug2 = Drug2.fit()
Drug2.summary()

A1.plot()
pred=Drug2.predict(start=1,end=11, typ='levels').rename('ARIMA predictions')
pred.plot()

mean_absolute_percentage_error(A1['SEVOFLURANE 99.97%'], pred)
predf=Drug2.predict(start=11,end=24,typ='levels').rename('ARIMA predictions')
predf
Drug2.save('drug_1.pkl')

import statsmodels.api as sm
model1 = sm.load('drug_1.pkl')
model2 = sm.load('drug_2.pkl')

predf1=model1.predict(start=12,end=24).rename('ARIMA predictions')
predf1

predf2=model2.predict(start=12,end=24).rename('ARIMA predictions')
predf2

